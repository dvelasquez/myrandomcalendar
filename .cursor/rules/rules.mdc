---
alwaysApply: true
---

# MyRandomCalendar - General Project Rules

## 🎯 Project Overview
A calendar application built with Astro 5, featuring BetterAuth authentication with Google OAuth integration.

## 🛠 Tech Stack
- **Astro 5** - Web framework
- **TailwindCSS 4** - Styling
- **React 19** - UI components, pure and functional. Only manage presentational state, NO DATA FETCHING.
- **ShadCN UI** - Component library for consistent UI elements
- **ESLint 9** - Code linting
- **Astro DB** - Database with Drizzle ORM client (accessible from "astro:db")
- **libsql** - Database provider
- **BetterAuth** - Authentication system (replaces custom auth)
- **Date-FNS** - For handling dates and times. Always prefer using this.

## 🔐 Authentication Status: WORKING
- **BetterAuth Migration**: Complete - all custom auth code removed
- **Google OAuth**: Fully functional and tested
- **Email/Password**: Available as alternative
- **Session Management**: Handled by BetterAuth automatically

## 🗄 Database Schema (CRITICAL)
The database schema MUST match BetterAuth's exact field names:

```typescript
// CRITICAL: These field names are non-negotiable
const Accounts = defineTable({
  columns: {
    id: column.text({ primaryKey: true }),
    accountId: column.text({ unique: true }),
    userId: column.text({ references: () => Users.columns.id }),
    providerId: column.text(),                    // NOT "provider"
    providerAccountId: column.text({ optional: true }),
    accessToken: column.text({ optional: true }),
    refreshToken: column.text({ optional: true }),
    accessTokenExpiresAt: column.date({ optional: true }), // NOT "expiresAt"
    tokenType: column.text({ optional: true }),
    scope: column.text({ optional: true }),
    idToken: column.text({ optional: true }),
    sessionState: column.text({ optional: true }),
    createdAt: column.date(),
    updatedAt: column.date(),
  },
});
```

## 🔧 Environment Variables (System Environment)
```bash
GOOGLE_CLIENT_ID=your-client-id-here
GOOGLE_CLIENT_SECRET=your-client-secret-here
BETTER_AUTH_SECRET=your-secret-key-here
```
**⚠️ IMPORTANT**: These are in system environment, NOT in `.env.local` files.

## 📁 Key File Structure
```
src/
├── lib/
│   ├── better-auth.ts      # BetterAuth configuration (CRITICAL)
│   ├── auth-client.ts      # Client-side auth utilities
│   └── types.ts           # Database type definitions
├── pages/
│   ├── api/auth/[...all].ts # Catch-all BetterAuth API route
│   └── login.astro         # Login page with Google button
├── actions/
│   ├── login.ts            # Uses auth.api.signInEmail()
│   ├── register.ts         # Uses auth.api.signUpEmail()
│   └── logout.ts           # Uses auth.api.signOut()
└── middleware.ts           # Uses auth.api.getSession()
```

## 🚨 Critical Configuration
```typescript
// src/lib/better-auth.ts - MUST have this exact configuration
export const auth = betterAuth({
  secret: process.env.BETTER_AUTH_SECRET as string,  // CRITICAL: Session encryption
  trustedOrigins: [                                  // CRITICAL: For local development
    "http://localhost:4321",
    "http://randomcalendar-dev.d13z.dev",
    "https://randomcalendar-dev.d13z.dev"
  ],
  database: drizzleAdapter(db, {
    provider: "sqlite",
    schema: {
      user: Users,
      session: Sessions,
      account: Accounts,      // Singular names
      verification: Verifications,
    },
    usePlural: false,        // CRITICAL: Must be false
  }),
  socialProviders: {
    google: {
      clientId: process.env.GOOGLE_CLIENT_ID as string,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET as string,
    },
  },
});
```

## 🔍 Common Issues & Quick Fixes
- **Schema Errors**: Use `npm astro -- db push --force-reset` for breaking changes
- **Field Name Errors**: Check BetterAuth documentation for exact field names
- **OAuth Errors**: Verify Google Cloud Console redirect URI: `http://localhost:4321/api/auth/callback/google`
- **Environment Issues**: Check system environment variables, not .env files
- **Trusted Origins Error**: Add `trustedOrigins` array to BetterAuth config for local development

## 📚 Documentation Location
- **`docs/README.md`** - Navigation guide
- **`docs/GOOGLE_OAUTH_SETUP.md`** - Overview and status
- **`docs/BETTERAUTH_DOCUMENTATION.md`** - Detailed technical reference

## ⚡ Quick Commands
```bash
npm run dev                    # Start development server
npm run astro -- db push --force-reset    # Reset database schema
npm test -- --run # Run tests without waiting for user input
npm run astro -- check # to check typescript errors in astro and ts files
printenv | grep GOOGLE         # Check Google credentials
```

## 🎯 Current Status
- ✅ BetterAuth fully integrated
- ✅ Google OAuth working and tested
- ✅ Database schema aligned
- ✅ All authentication flows functional
- ✅ Server-side data fetching implemented
- ✅ **Background Events System** - Availability visualization with FullCalendar
- ✅ **Pure Function Architecture** - Comprehensive test coverage (91 tests)
- ✅ **ShadCN UI Integration** - Consistent button components across all pages
- ✅ Documentation complete

## 🎨 UI Component Guidelines
- **ShadCN UI** is the primary component library for all UI elements
- **Button Components**: Use `Button` for buttons, `ButtonLink` for link buttons
- **Never use custom button styling** - only ShadCN variants
- **Variant Selection**: Choose variants semantically (default, secondary, destructive, outline, ghost, link)
- **Import Patterns**: Use `@/components/ui/button` in Astro, `./ui/button` in React
- **Styling**: Use `className` for React components, `class` for Astro/HTML elements
- See detailed rules in `rules-ui.mdc` and `rules-react.mdc`

## 🏗 Feature Architecture Pattern (MANDATORY)

### **Feature Structure**
All new features MUST follow this exact structure in `src/features/{feature-name}/`:

```
src/features/
├── {feature-name}/
│   ├── actions/           # Astro actions (API endpoints)
│   │   ├── {actionName}.ts
│   │   └── index.ts       # Exports all actions as named object
│   ├── db/               # Database CRUD operations
│   │   ├── create.ts
│   │   ├── get.ts
│   │   ├── update.ts
│   │   ├── delete.ts
│   │   └── [other-crud].ts
│   ├── domain/           # Business logic (reserved for future use)
│   ├── services/         # Page-specific business logic
│   │   └── {page}-handler.ts
│   └── models/           # Data definitions
│       ├── {FeatureName}.db.ts      # Astro DB table definition
│       ├── {FeatureName}.schema.ts  # Zod validation schemas
│       └── {FeatureName}.types.ts   # TypeScript interfaces
```

### **File Naming Conventions**
- **Actions**: `camelCase.ts` (e.g., `createScheduleBlock.ts`)
- **DB**: `camelCase.ts` (e.g., `create.ts`, `get.ts`)
- **Models**: `PascalCase.{db|schema|types}.ts` (e.g., `ScheduleBlock.db.ts`)
- **Services**: `{page}-handler.ts` (e.g., `maintainer-handler.ts`)

### **Action Pattern**
```typescript
// actions/{actionName}.ts
export const {actionName} = defineAction({
  accept: 'form',
  input: {FeatureName}FormSchema,
  handler: async (data, context): Promise<{FeatureName}Type> => {
    try {
      // ✅ UPDATED: Use context.locals.user for better performance
      if (!context.locals.user) {
        throw new ActionError({ 
          code: 'UNAUTHORIZED',
          message: 'You must be logged in to {action description}'
        });
      }
      
      // Prepare data with userId
      const {featureName}Data: New{FeatureName} = {
        ...data,
        userId: context.locals.user.id,
      };
      
      // Call DB function
      const result = await {dbFunction}({featureName}Data);
      
      // Return result directly
      return result;
    } catch (error) {
      console.error('Error in {actionName}:', error);
      
      if (error instanceof ActionError) {
        throw error;
      }
      
      throw new ActionError({
        code: 'INTERNAL_SERVER_ERROR',
        message: 'Failed to {action description}',
      });
    }
  },
});
```

### **Services Pattern**
```typescript
// services/{page}-handler.ts
export interface {Page}PageData {
  // Structured data interface
  data1: Type1[];
  data2: Type2[];
  formOptions: FormOptions;
  successMessage?: string;
  errorMessage?: string;
}

export async function handle{Page}Page(
  context: ActionAPIContext,
  ...params
): Promise<{Page}PageData | null> {
  try {
    if (!context.locals.user) {
      return null;
    }

    // Pure business logic
    // Data fetching and transformation
    // No presentation concerns
    
    return {
      data1,
      data2,
      formOptions,
      successMessage,
      errorMessage
    };
  } catch (error) {
    console.error('Error in handle{Page}Page:', error);
    return null;
  }
}
```

### **DB Pattern**
```typescript
// db/{operation}.ts
export async function {operationName}(data: {Type}): Promise<{Type}> {
  // Pure database operations only
  // No business logic
  // Return properly typed data
}
```

### **Models Pattern**
- **`.db.ts`**: Astro DB table definitions with `defineTable`
- **`.schema.ts`**: Zod schemas for validation with proper error messages
- **`.types.ts`**: TypeScript interfaces and type definitions

### **Index Export Pattern**
```typescript
// actions/index.ts
import { action1 } from "./action1";
import { action2 } from "./action2";

const {featureName} = {
  action1,
  action2,
};

export default {featureName};
```

### **Examples**
- ✅ `src/features/schedule/` - Complete implementation
- ✅ `src/features/periodic-events/` - Complete implementation
- ❌ Any feature not following this exact structure

### **Domain Folder**
- Currently empty but reserved for business logic
- Will contain pure functions for complex business rules
- Separates business logic from data access and API layers

---
*Last Updated: January 15, 2025 - Added Feature Architecture Pattern*