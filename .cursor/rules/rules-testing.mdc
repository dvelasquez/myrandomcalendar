---
globs: *.test.*
alwaysApply: false
---
# Testing-Specific Rules

## 🧪 Testing Framework & Tools
- **Vitest** - Test runner and assertion library
- **Testing Library** - Component testing utilities
- **Pure Function Architecture** - Comprehensive test coverage (91 tests)

## 🎯 Testing Philosophy

### **Pure Function Testing**
- Test pure functions extensively
- Focus on business logic and data transformations
- Avoid testing implementation details
- Test edge cases and error conditions

### **Component Testing**
- Test component behavior, not implementation
- Use user-centric testing approaches
- Test accessibility and user interactions
- Mock external dependencies

## ✅ What to Test

### **Pure Functions**
```typescript
// ✅ Test pure functions thoroughly
describe('availabilityCalculator', () => {
  it('should calculate availability correctly', () => {
    const scheduleBlocks = [
      { start: '09:00', end: '17:00', dayOfWeek: 1 },
      { start: '10:00', end: '16:00', dayOfWeek: 2 }
    ];
    
    const result = calculateAvailability(scheduleBlocks, new Date('2024-01-01'));
    
    expect(result).toEqual({
      monday: { start: '09:00', end: '17:00' },
      tuesday: { start: '10:00', end: '16:00' }
    });
  });

  it('should handle empty schedule blocks', () => {
    const result = calculateAvailability([], new Date('2024-01-01'));
    expect(result).toEqual({});
  });

  it('should handle invalid time ranges', () => {
    const invalidBlocks = [
      { start: '25:00', end: '26:00', dayOfWeek: 1 }
    ];
    
    expect(() => calculateAvailability(invalidBlocks, new Date('2024-01-01')))
      .toThrow('Invalid time format');
  });
});
```

### **Data Transformers**
```typescript
// ✅ Test data transformation functions
describe('eventTransformers', () => {
  it('should transform calendar events to FullCalendar format', () => {
    const events = [
      { id: '1', title: 'Meeting', start: '2024-01-01T10:00:00Z', end: '2024-01-01T11:00:00Z' }
    ];
    
    const result = transformToFullCalendar(events);
    
    expect(result).toEqual([
      {
        id: '1',
        title: 'Meeting',
        start: '2024-01-01T10:00:00Z',
        end: '2024-01-01T11:00:00Z',
        backgroundColor: '#3b82f6',
        borderColor: '#1d4ed8'
      }
    ]);
  });
});
```

### **React Components**
```typescript
// ✅ Test component behavior
import { render, screen, fireEvent } from '@testing-library/react';
import { CalendarEvent } from './CalendarEvent';

describe('CalendarEvent', () => {
  const mockEvent = {
    id: '1',
    title: 'Test Event',
    start: '2024-01-01T10:00:00Z',
    end: '2024-01-01T11:00:00Z'
  };

  it('should render event title', () => {
    render(<CalendarEvent event={mockEvent} onEdit={jest.fn()} />);
    expect(screen.getByText('Test Event')).toBeInTheDocument();
  });

  it('should call onEdit when edit button is clicked', () => {
    const onEdit = jest.fn();
    render(<CalendarEvent event={mockEvent} onEdit={onEdit} />);
    
    fireEvent.click(screen.getByRole('button', { name: /edit/i }));
    
    expect(onEdit).toHaveBeenCalledWith(mockEvent);
  });

  it('should be accessible', () => {
    render(<CalendarEvent event={mockEvent} onEdit={jest.fn()} />);
    
    const eventElement = screen.getByRole('button');
    expect(eventElement).toHaveAttribute('aria-label', 'Test Event');
  });
});
```

## 🚫 What NOT to Test

### **Avoid Testing Implementation Details**
```typescript
// ❌ DON'T TEST IMPLEMENTATION DETAILS
it('should call useState with initial value', () => {
  // Don't test React hooks implementation
});

it('should have specific CSS class', () => {
  // Don't test styling details unless it's behavior-related
});
```

### **Avoid Testing External Libraries**
```typescript
// ❌ DON'T TEST THIRD-PARTY LIBRARIES
it('should format date with date-fns', () => {
  // Don't test date-fns functionality
});
```

## 🔧 Testing Best Practices

### **Test Structure**
- Use descriptive test names
- Follow AAA pattern: Arrange, Act, Assert
- Group related tests in `describe` blocks
- Use `beforeEach` and `afterEach` for setup/cleanup

### **Mocking**
```typescript
// ✅ Mock external dependencies
import { vi } from 'vitest';

// Mock date-fns
vi.mock('date-fns', () => ({
  format: vi.fn((date) => '2024-01-01'),
  parseISO: vi.fn((date) => new Date(date))
}));

// Mock API calls
vi.mock('../actions/schedule-blocks', () => ({
  getScheduleBlocks: vi.fn(() => Promise.resolve([]))
}));
```

### **Test Data**
```typescript
// ✅ Use test data factories
const createMockEvent = (overrides = {}) => ({
  id: '1',
  title: 'Test Event',
  start: '2024-01-01T10:00:00Z',
  end: '2024-01-01T11:00:00Z',
  ...overrides
});

const createMockUser = (overrides = {}) => ({
  id: 'user-1',
  name: 'Test User',
  email: 'test@example.com',
  ...overrides
});
```

### **Async Testing**
```typescript
// ✅ Test async functions properly
it('should handle async operations', async () => {
  const mockData = [{ id: '1', title: 'Test' }];
  vi.mocked(getScheduleBlocks).mockResolvedValue(mockData);
  
  const result = await fetchScheduleBlocks('user-1');
  
  expect(result).toEqual(mockData);
  expect(getScheduleBlocks).toHaveBeenCalledWith('user-1');
});
```

## 🎯 Test Coverage Goals

### **Pure Functions**
- **100% coverage** for pure functions
- Test all edge cases and error conditions
- Test with various input combinations

### **Components**
- Test user interactions and accessibility
- Test error states and loading states
- Test prop variations

### **Integration Tests**
- Test data flow between components
- Test form submissions and API interactions
- Test authentication flows

## 🔍 Common Test Patterns

### **Testing Date Functions**
```typescript
// ✅ Test date-related functions
describe('date utilities', () => {
  it('should handle different date formats', () => {
    const date1 = '2024-01-01';
    const date2 = new Date('2024-01-01');
    
    expect(formatDate(date1)).toBe('Jan 1, 2024');
    expect(formatDate(date2)).toBe('Jan 1, 2024');
  });
});
```

### **Testing Form Components**
```typescript
// ✅ Test form behavior
it('should validate form input', async () => {
  render(<EventForm onSubmit={jest.fn()} />);
  
  const titleInput = screen.getByLabelText(/title/i);
  fireEvent.change(titleInput, { target: { value: '' } });
  fireEvent.submit(screen.getByRole('form'));
  
  expect(await screen.findByText(/title is required/i)).toBeInTheDocument();
});
```

## ⚡ Running Tests
```bash
npm test -- --run                    # Run tests without waiting for user input
npm test -- --coverage              # Run tests with coverage report
npm test -- --watch                 # Run tests in watch mode
npm test -- --reporter=verbose      # Run tests with verbose output
```
