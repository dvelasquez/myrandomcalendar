---
import { actions } from 'astro:actions';
import { formatDuration, formatFrequency, getCategoryColor } from '../../features/periodic-events/lib/formatters'; 
import type { PeriodicEvent as PeriodicEventType } from '../../features/periodic-events/models/PeriodicEvents.types';
import { handlePeriodicEventsIndexPage } from '../../features/periodic-events/services/page-handler';
import Layout from '../../layouts/Layout.astro';

// Fetch periodic events server-side using Astro.callAction
let periodicEvents: PeriodicEventType[] = [];
try {
  const formData = new FormData();
  const result = await Astro.callAction(actions.periodicEvents.get, formData);
  if (result.data && !result.error) {
    periodicEvents = result.data;
  }
} catch (error) {
  console.error('Error fetching periodic events:', error);
}

// Handle page logic using service
const pageData = await handlePeriodicEventsIndexPage(Astro.request, periodicEvents);

// Redirect to login if not authenticated
if (!pageData) {
  return Astro.redirect('/login');
}

// Destructure page data
const { periodicEvents: events } = pageData;

// Helper function to get priority color
function getPriorityColor(priority: string): string {
  const colors = {
    high: 'bg-red-100 text-red-800',
    medium: 'bg-yellow-100 text-yellow-800',
    low: 'bg-green-100 text-green-800',
  };
  return colors[priority as keyof typeof colors] || colors.medium;
}
---

<Layout title="My Periodic Events">
  <div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Header -->
      <div class="flex justify-between items-center mb-8">
        <div>
          <h1 class="text-3xl font-bold text-gray-900 mb-2">My Periodic Events</h1>
          <p class="text-gray-600">
            Activities you want to do regularly without fixed times
          </p>
        </div>
        <a 
          href="/periodic-events/create" 
          class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 font-medium"
        >
          Create New Event
        </a>
      </div>

      <!-- Events List -->
      {events.length === 0 ? (
        // <!-- Empty State -->
        <div class="bg-white shadow-lg rounded-lg p-12 text-center">
          <div class="mx-auto w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mb-4">
            <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
            </svg>
          </div>
          <h3 class="text-lg font-medium text-gray-900 mb-2">No periodic events yet</h3>
          <p class="text-gray-500 mb-6">
            Create your first periodic event to start tracking activities you want to do regularly.
          </p>
          <a 
            href="/periodic-events/create" 
            class="bg-blue-600 text-white px-6 py-3 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 font-medium"
          >
            Create Your First Event
          </a>
        </div>
      ) : (
        // <!-- Events Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {events.map((event) => (
            <div class="bg-white shadow-lg rounded-lg p-6 hover:shadow-xl transition-shadow duration-200">
              <!-- Event Header -->
              <div class="flex items-start justify-between mb-4">
                <div class="flex items-center space-x-3">
                  <div 
                    class="w-4 h-4 rounded-full" 
                    style={`background-color: ${event.color}`}
                  ></div>
                  <h3 class="text-lg font-semibold text-gray-900">{event.title}</h3>
                </div>
                <div class={`px-2 py-1 rounded-full text-xs font-medium ${getPriorityColor(event.priority)}`}>
                  {event.priority}
                </div>
              </div>

              <!-- Event Description -->
              {event.description && (
                <p class="text-gray-600 text-sm mb-4 line-clamp-2">{event.description}</p>
              )}

              <!-- Event Details -->
              <div class="space-y-3">
                <!-- Frequency -->
                <div class="flex items-center space-x-2">
                  <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  <span class="text-sm text-gray-600">
                    {formatFrequency(event.frequency, event.frequencyCount)}
                  </span>
                </div>

                <!-- Duration -->
                <div class="flex items-center space-x-2">
                  <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  <span class="text-sm text-gray-600">
                    {formatDuration(event.duration)}
                  </span>
                </div>

                <!-- Category -->
                <div class="flex items-center space-x-2">
                  <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                  </svg>
                  <span class={`px-2 py-1 rounded-full text-xs font-medium ${getCategoryColor(event.category)}`}>
                    {event.category}
                  </span>
                </div>
              </div>

              <!-- Event Footer -->
              <div class="mt-6 pt-4 border-t border-gray-200">
                <div class="flex items-center justify-between">
                  <span class="text-xs text-gray-500">
                    Created {new Date(event.createdAt).toLocaleDateString()}
                  </span>
                  <div class="flex items-center space-x-2">
                    {event.isActive ? (
                      <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                        <div class="w-2 h-2 bg-green-400 rounded-full mr-1"></div>
                        Active
                      </span>
                    ) : (
                      <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                        <div class="w-2 h-2 bg-gray-400 rounded-full mr-1"></div>
                        Inactive
                      </span>
                    )}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      <!-- Stats Summary -->
      {events.length > 0 && (
        <div class="mt-8 bg-white shadow-lg rounded-lg p-6">
          <h3 class="text-lg font-semibold text-gray-900 mb-4">Summary</h3>
          <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div class="text-center">
              <div class="text-2xl font-bold text-blue-600">{events.length}</div>
              <div class="text-sm text-gray-600">Total Events</div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-bold text-green-600">
                {events.filter(e => e.isActive).length}
              </div>
              <div class="text-sm text-gray-600">Active</div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-bold text-purple-600">
                {events.filter(e => e.category === 'exercise').length}
              </div>
              <div class="text-sm text-gray-600">Exercise</div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-bold text-orange-600">
                {Math.round(events.reduce((sum, e) => sum + e.duration, 0) / events.length)} min
              </div>
              <div class="text-sm text-gray-600">Avg Duration</div>
            </div>
          </div>
        </div>
      )}
    </div>
  </div>
</Layout>
