---
import { actions } from 'astro:actions';
import { startOfMonth, endOfMonth } from 'date-fns';
import { getScheduleBlocks } from '../actions/schedule-blocks';
import ScheduleSettings from '../components/ScheduleSettings.tsx';
import Layout from '../layouts/Layout.astro';
import { transformGoogleApiEventsToFullCalendar } from '../lib/event-transformers';
import type { ScheduleBlock, CalendarEvent, GoogleCalendarApiEvent } from '../lib/types';
import { createFetchCalendarFormData } from '../lib/types';

export const prerender = false; // Required for server actions

// Get user from middleware
const { user } = Astro.locals;

// Fetch schedule blocks server-side
let scheduleBlocks: ScheduleBlock[] = [];
if (user) {
  try {
    scheduleBlocks = await getScheduleBlocks(user.id);
  } catch (error) {
    console.error('Error fetching schedule blocks:', error);
    // Continue with empty array if fetch fails
  }
}

// Fetch real Google Calendar events
let googleCalendarEvents: CalendarEvent[] = [];
let calendarError: string | null = null;

if (user) {
  try {
    // Create a reasonable date range for settings (current month)
    const today = new Date();
    const startOfCurrentMonth = startOfMonth(today);
    const endOfCurrentMonth = endOfMonth(today);
    
    // Create typesafe FormData with proper date range
    const formData = createFetchCalendarFormData(startOfCurrentMonth, endOfCurrentMonth);
    
    const result = await Astro.callAction(actions.fetchCalendar, formData);
    if (result.data?.success) {
      // Transform Google Calendar API events to CalendarEvent format
      const googleApiEvents = result.data.events as GoogleCalendarApiEvent[];
      googleCalendarEvents = transformGoogleApiEventsToFullCalendar(googleApiEvents);
    } else {
      calendarError = result.error?.message || 'Failed to fetch calendar data';
      console.warn('Calendar fetch error:', calendarError);
    }
  } catch (err) {
    calendarError = (err as Error).message || 'An error occurred while fetching calendar data';
    console.error('Calendar fetch error:', err);
  }
}
---

<Layout>
  <div class="container mx-auto px-4 py-8">
    {user ? (
      <div class="max-w-6xl mx-auto">
        <div class="bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded mb-6">
          <div class="flex justify-between items-start">
            <div>
              <h2 class="text-xl font-bold">Schedule Management</h2>
              <p>Configure your schedule preferences and view availability for optimal event planning.</p>
              {!calendarError && (
                <p class="text-sm mt-2">
                  <strong>Google Calendar Events:</strong> {googleCalendarEvents.length} events loaded
                </p>
              )}
            </div>
            <button 
              id="refreshCalendarBtn"
              class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm"
            >
              Refresh Calendar
            </button>
          </div>
        </div>
        
        {calendarError ? (
          <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded mb-6">
            <h3 class="font-bold">Google Calendar Integration Notice:</h3>
            <p class="mb-2">{calendarError}</p>
            <p class="text-sm">
              {calendarError.includes('calendar access') || calendarError.includes('INSUFFICIENT_SCOPE') ? (
                <>
                  <strong>Solution:</strong> You need to sign out and sign in with Google again to grant calendar permissions.
                  <br />
                  <a href="/logout" class="underline">Sign out</a> and then <a href="/login" class="underline">sign in with Google</a> again.
                </>
              ) : (
                'Make sure you\'re signed in with Google and have granted calendar access permissions.'
              )}
            </p>
          </div>
        ) : null}
        
        <div class="bg-white rounded-lg shadow-md p-6">
          <ScheduleSettings 
            userId={user.id}
            googleCalendarEvents={googleCalendarEvents}
            initialScheduleBlocks={scheduleBlocks}
            client:load
          />
        </div>
        
        <div class="mt-6">
          <a 
            href="/calendar" 
            class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded mr-4"
          >
            View Calendar
          </a>
          <a 
            href="/" 
            class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded mr-4"
          >
            Back to Home
          </a>
          <form method="POST" action={actions.logout} class="inline">
            <button 
              type="submit" 
              class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"
            >
              Logout
            </button>
          </form>
        </div>
      </div>
    ) : (
      <div class="max-w-2xl mx-auto">
        <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded mb-6">
          <h2 class="text-xl font-bold">Access Denied</h2>
          <p>You must be logged in to manage your schedule settings.</p>
        </div>
        
        <div class="bg-white rounded-lg shadow-md p-6">
          <div class="text-center space-y-4">
            <p class="text-gray-600">Please log in to access your schedule settings.</p>
            
            <div class="flex space-x-4 justify-center">
              <a 
                href="/login" 
                class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
              >
                Login
              </a>
              <a 
                href="/register" 
                class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"
              >
                Register
              </a>
            </div>
          </div>
        </div>
      </div>
    )}
  </div>
</Layout>

<script>
  import { actions } from 'astro:actions';
  import { navigate } from 'astro:transitions/client';
  import { startOfMonth, endOfMonth } from 'date-fns';
  import { createFetchCalendarFormData } from '../lib/types';
  
  // Handle calendar refresh
  const refreshBtn = document.getElementById('refreshCalendarBtn') as HTMLButtonElement | null;
  
  refreshBtn?.addEventListener('click', async () => {
    if (!refreshBtn) return;
    
    refreshBtn.textContent = 'Refreshing...';
    refreshBtn.disabled = true;
    
    try {
      // Create proper date range for refresh
      const today = new Date();
      const startOfCurrentMonth = startOfMonth(today);
      const endOfCurrentMonth = endOfMonth(today);
      
      // Create typesafe FormData
      const formData = createFetchCalendarFormData(startOfCurrentMonth, endOfCurrentMonth);
      
      // Fetch fresh calendar data
      const result = await actions.fetchCalendar(formData);
      
      if (result.data?.success) {
        // Reload the page to update with fresh data
        window.location.reload();
      } else {
        console.error('Error refreshing calendar:', result.error?.message);
        refreshBtn.textContent = 'Refresh Calendar';
        refreshBtn.disabled = false;
      }
    } catch (error) {
      console.error('Error refreshing calendar:', error);
      refreshBtn.textContent = 'Refresh Calendar';
      refreshBtn.disabled = false;
    }
  });
  
  // Handle logout form
  const logoutForm = document.querySelector('form[action*="logout"]');
  
  logoutForm?.addEventListener('submit', async (event) => {
    event.preventDefault();
    
    const { error } = await actions.logout(new FormData());
    
    if (!error) {
      navigate('/');
    }
  });
</script>
