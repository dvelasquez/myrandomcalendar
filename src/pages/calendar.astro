---
import { actions } from 'astro:actions';
import { startOfMonth, endOfMonth, subDays, addDays } from 'date-fns';
import FullCalendarComponent from '../components/FullCalendar.tsx';
import { calculateAvailabilityForDateRange, DEFAULT_AVAILABILITY_CONFIG } from '../features/calendar/domain/availability-calculator';
import { transformTimeSlotsToBackgroundEvents, DEFAULT_BACKGROUND_EVENT_CONFIG } from '../features/calendar/domain/background-event-transformer';
import type { ScheduleBlock } from '../features/schedule/models/ScheduleBlocks.types';
import Layout from '../layouts/Layout.astro';
import { transformGoogleApiEventsToFullCalendar, type FullCalendarEvent } from '../lib/calendar-utils.ts';
import { createFetchCalendarFormData } from '../lib/types';
import type { GoogleCalendarApiEvent, CalendarEvent } from '../lib/types.ts';

export const prerender = false; // Required for server actions

// Get user from middleware
const { user } = Astro.locals;

// Initialize calendar data
let calendarData: { success: boolean; events: GoogleCalendarApiEvent[]; calendarId: string | null | undefined; timeZone: string | null | undefined } | null = null;
let error: string | null = null;
let fullCalendarEvents: FullCalendarEvent[] = [];
let scheduleBlocks: ScheduleBlock[] = [];
let availabilityBackgroundEvents: FullCalendarEvent[] = [];
let calendarEvents: CalendarEvent[] = [];

// Try to fetch calendar data and schedule blocks if user is logged in
if (user) {
  try {
    // For initial load, fetch events for a reasonable default range (current month)
    const today = new Date();
    const startOfCurrentMonth = startOfMonth(today);
    const endOfCurrentMonth = endOfMonth(today);
    
    // Create typesafe FormData with proper date range
    const formData = createFetchCalendarFormData(startOfCurrentMonth, endOfCurrentMonth);
    
    // Fetch Google Calendar events for initial date range
    const result = await Astro.callAction(actions.calendar.providers.google.fetchCalendar, formData);
    if (result.data?.success) {
      calendarData = result.data;
      // Transform Google Calendar events to FullCalendar format
      fullCalendarEvents = transformGoogleApiEventsToFullCalendar(calendarData?.events || []);
    } else {
      error = result.error?.message || 'Failed to fetch calendar data';
    }

    // Fetch schedule blocks
    try {
      const result = await Astro.callAction(actions.schedule.getScheduleBlocks, new FormData());
      if (result.data?.success && result.data.data) {
        scheduleBlocks = result.data.data;
      }
    } catch (scheduleError) {
      console.error('Error fetching schedule blocks:', scheduleError);
      // Continue with empty array if fetch fails
    }

    // Convert FullCalendarEvent[] to CalendarEvent[] for component usage
    calendarEvents = fullCalendarEvents.map(event => ({
      id: event.id,
      title: event.title,
      start: event.start,
      end: event.end,
      allDay: event.allDay,
      description: event.description,
      location: event.location,
      url: event.url,
      backgroundColor: event.backgroundColor,
      borderColor: event.borderColor,
      textColor: event.textColor,
      extendedProps: event.extendedProps as CalendarEvent['extendedProps']
    }));

    // Calculate availability and create background events if we have schedule blocks
    if (scheduleBlocks.length > 0) {
      try {
        // Calculate availability for a 6-week range (typical FullCalendar month view)
        const today = new Date();
        const startDate = subDays(today, 7); // Start 1 week ago
        const endDate = addDays(today, 35); // End 5 weeks from now
        
        const timeSlots = await calculateAvailabilityForDateRange(
          startDate,
          endDate,
          scheduleBlocks,
          calendarEvents,
          DEFAULT_AVAILABILITY_CONFIG
        );

        // Transform time slots to background events
        const backgroundEvents = transformTimeSlotsToBackgroundEvents(
          timeSlots,
          DEFAULT_BACKGROUND_EVENT_CONFIG
        );

        // Convert background events to FullCalendar format
        availabilityBackgroundEvents = backgroundEvents.map(event => ({
          id: event.id,
          title: event.title,
          start: event.start,
          end: event.end,
          allDay: event.allDay,
          backgroundColor: event.backgroundColor,
          borderColor: event.borderColor,
          textColor: event.textColor,
          extendedProps: event.extendedProps
        }));

        // Combine calendar events with background events
        fullCalendarEvents = [...fullCalendarEvents, ...availabilityBackgroundEvents];
      } catch (availabilityError) {
        console.error('Error calculating availability:', availabilityError);
        // Continue without background events if calculation fails
      }
    }
  } catch (err) {
    error = (err as Error).message || 'An error occurred while fetching calendar data';
  }
}
---

<Layout>
  <div class="container mx-auto px-4 py-8">
    {user ? (
      <div class="max-w-4xl mx-auto">
        <div class="bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded mb-6">
          <h2 class="text-xl font-bold">Your Calendar with Availability</h2>
          <p>Interactive calendar view showing your Google Calendar events and personal schedule availability</p>
          {scheduleBlocks.length > 0 && (
            <div class="mt-2 text-sm">
              <p><strong>Schedule Blocks:</strong> {scheduleBlocks.length} configured</p>
              <p><strong>Availability Events:</strong> {availabilityBackgroundEvents.length} background events</p>
            </div>
          )}
        </div>
        
        <div class="bg-white rounded-lg shadow-md p-6">
          {error ? (
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
              <h3 class="font-bold">Error:</h3>
              <p>{error}</p>
              <p class="text-sm mt-2">
                {error.includes('calendar access') || error.includes('INSUFFICIENT_SCOPE') ? (
                  <>
                    <strong>Solution:</strong> You need to sign out and sign in with Google again to grant calendar permissions.
                    <br />
                    <a href="/logout" class="underline">Sign out</a> and then <a href="/login" class="underline">sign in with Google</a> again.
                  </>
                ) : (
                  'Make sure you\'re signed in with Google and have granted calendar access permissions.'
                )}
              </p>
            </div>
          ) : calendarData ? (
            <div>
              <div class="mb-4 flex justify-between items-center">
                <div>
                  <h3 class="text-lg font-semibold mb-2">Calendar Information</h3>
                  <div class="text-sm text-gray-600 space-y-1">
                    <p><strong>Time Zone:</strong> {calendarData.timeZone}</p>
                    <p><strong>Events Found:</strong> {calendarData.events.length}</p>
                  </div>
                </div>
                <button 
                  id="refreshBtn"
                  class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
                >
                  Refresh Calendar
                </button>
              </div>
              
              <div class="mb-4">
                <FullCalendarComponent 
                  events={calendarEvents}
                  showEventModal={true}
                  onDateRangeChange={(startDate, endDate) => (window as unknown as { handleDateRangeChange?: (startDate: Date, endDate: Date) => void }).handleDateRangeChange?.(startDate, endDate)}
                  client:load
                />
              </div>
              
              {/* Legend for availability background events */}
              {scheduleBlocks.length > 0 && (
                <div class="mt-4 border rounded-lg p-4 bg-gray-50">
                  <h4 class="text-sm font-semibold text-gray-700 mb-2">Availability Legend</h4>
                  <div class="flex flex-wrap gap-4 text-sm">
                    <div class="flex items-center">
                      <div class="w-4 h-4 bg-green-500 rounded mr-2"></div>
                      <span>Available Time</span>
                    </div>
                    <div class="flex items-center">
                      <div class="w-4 h-4 bg-red-500 rounded mr-2"></div>
                      <span>Busy (Google Calendar)</span>
                    </div>
                    <div class="flex items-center">
                      <div class="w-4 h-4 bg-blue-500 rounded mr-2"></div>
                      <span>Schedule Block</span>
                    </div>
                  </div>
                  <p class="text-xs text-gray-600 mt-2">
                    Background colors show your availability. Regular events appear on top.
                  </p>
                </div>
              )}
              
              <div class="mt-4 border rounded-lg p-4 bg-gray-50">
                <details class="cursor-pointer">
                  <summary class="text-sm font-semibold text-gray-700 hover:text-gray-900">
                    View Raw JSON Data (Click to expand)
                  </summary>
                  <pre id="jsonOutput" class="text-sm overflow-auto max-h-96 bg-white p-4 rounded border mt-2">{JSON.stringify(calendarData, null, 2)}</pre>
                </details>
              </div>
            </div>
          ) : (
            <div class="text-center">
              <p class="text-gray-600">Loading calendar data...</p>
            </div>
          )}
          
          <div class="mt-6">
            <a 
              href="/schedule" 
              class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-4"
            >
              Schedule Management
            </a>
            <a 
              href="/" 
              class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded mr-4"
            >
              Back to Home
            </a>
            <a 
              href="/logout" 
              class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"
            >
              Logout
            </a>
          </div>
        </div>
      </div>
    ) : (
      <div class="max-w-2xl mx-auto">
        <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded mb-6">
          <h2 class="text-xl font-bold">Access Denied</h2>
          <p>You must be logged in to view your calendar.</p>
        </div>
        
        <div class="bg-white rounded-lg shadow-md p-6">
          <div class="text-center space-y-4">
            <p class="text-gray-600">Please log in to access your Google Calendar.</p>
            
            <div class="flex space-x-4 justify-center">
              <a 
                href="/login" 
                class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
              >
                Login
              </a>
              <a 
                href="/register" 
                class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"
              >
                Register
              </a>
            </div>
          </div>
        </div>
      </div>
    )}
  </div>
</Layout>

<script>
  import { actions } from 'astro:actions';
import { endOfMonth, startOfMonth } from 'date-fns';
import { createFetchCalendarFormData } from '../lib/types';
  
  const refreshBtn = document.getElementById('refreshBtn') as HTMLButtonElement | null;
  const jsonOutput = document.getElementById('jsonOutput') as HTMLPreElement | null;
  
  // Function to fetch calendar data for a specific date range
  async function fetchCalendarForDateRange(startDate: Date, endDate: Date) {
    const formData = createFetchCalendarFormData(startDate, endDate);
    
    try {
      const result = await actions.calendar.providers.google.fetchCalendar(formData);
      return result;
    } catch (error) {
      console.error('Error fetching calendar for date range:', error);
      return { error: { message: 'Failed to fetch calendar data' } };
    }
  }
  
  // Function to handle date range changes from FullCalendar
  function handleDateRangeChange(startDate: Date, endDate: Date) {
    console.log('Date range changed:', { startDate, endDate });
    
    // Fetch new calendar data for the visible date range
    fetchCalendarForDateRange(startDate, endDate).then(result => {
      if ('data' in result && result.data?.success && jsonOutput) {
        jsonOutput.textContent = JSON.stringify(result.data, null, 2);
        
        // Update the events count display
        const eventsCountElement = document.querySelector('p:has(strong:contains("Events Found"))');
        if (eventsCountElement) {
          eventsCountElement.textContent = `Events Found: ${result.data.events.length}`;
        }
      } else if ('error' in result && result.error && jsonOutput) {
        jsonOutput.textContent = JSON.stringify({ error: result.error.message }, null, 2);
      }
    });
  }
  
  // Make the function globally available for the FullCalendar component
  (window as unknown as { handleDateRangeChange: (startDate: Date, endDate: Date) => void }).handleDateRangeChange = handleDateRangeChange;
  
  refreshBtn?.addEventListener('click', async () => {
    if (!refreshBtn || !jsonOutput) return;
    
    refreshBtn.textContent = 'Refreshing...';
    refreshBtn.disabled = true;
    
    try {
      // For refresh, use the current month as default range
      const today = new Date();
      const startOfCurrentMonth = startOfMonth(today);
      const endOfCurrentMonth = endOfMonth(today);
      
      // Create typesafe FormData with proper date range
      const formData = createFetchCalendarFormData(startOfCurrentMonth, endOfCurrentMonth);
      
      const result = await actions.calendar.providers.google.fetchCalendar(formData);
      
      if (result.data?.success) {
        jsonOutput.textContent = JSON.stringify(result.data, null, 2);
        // Reload the page to update the FullCalendar with new data
        window.location.reload();
      } else {
        jsonOutput.textContent = JSON.stringify({ error: result.error?.message || 'Failed to fetch calendar data' }, null, 2);
      }
    } catch (error) {
      jsonOutput.textContent = JSON.stringify({ error: (error as Error).message || 'An error occurred' }, null, 2);
    } finally {
      refreshBtn.textContent = 'Refresh Calendar';
      refreshBtn.disabled = false;
    }
  });
  
</script>
