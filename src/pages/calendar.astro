---
import { actions } from 'astro:actions';
import { startOfMonth, endOfMonth } from 'date-fns';
import FullCalendarComponent from '../components/FullCalendar.tsx';
import type { ScheduleBlock } from '../features/schedule/models/ScheduleBlocks.types';
import Layout from '../layouts/Layout.astro';
import type { BackgroundEvent } from '@/features/calendar/domain/background-event-transformer';
import type { CalendarEvent } from '@/features/calendar/models';

export const prerender = false; // Required for server actions

// Get user from middleware
const { user } = Astro.locals;

// Initialize calendar data
let calendarData: { success: boolean; events: CalendarEvent[]; calendarId: string | null | undefined; timeZone: string | null | undefined } | null = null;
let error: string | null = null;
// Combined events for FullCalendar component
let fullCalendarEvents: CalendarEvent[] = [];
let scheduleBlocks: ScheduleBlock[] = [];
let availabilityBackgroundEvents: BackgroundEvent[] = [];
let calendarEvents: CalendarEvent[] = [];

// Try to fetch calendar data if user is logged in
if (user) {
  try {
    // For initial load, fetch events for a reasonable default range (current month)
    const today = new Date();
    const startOfCurrentMonth = startOfMonth(today);
    const endOfCurrentMonth = endOfMonth(today);
    
    const formData = new FormData();
    formData.append('startDate', startOfCurrentMonth.toISOString());
    formData.append('endDate', endOfCurrentMonth.toISOString());
    
    // Fetch calendar page data using new service
    const result = await Astro.callAction(actions.schedule.getCalendarPageData, formData);
    if (result.data) {
      scheduleBlocks = result.data.scheduleBlocks;
      calendarEvents = result.data.googleCalendarEvents;
      availabilityBackgroundEvents = result.data.availabilityBackgroundEvents;
      error = result.data.calendarError;
      
      // Create calendar data structure for compatibility
      calendarData = {
        success: !error,
        events: calendarEvents,
        calendarId: 'primary',
        timeZone: 'UTC'
      };
      
      // Combine calendar events with background events
      fullCalendarEvents = [...calendarEvents, ...availabilityBackgroundEvents];
    } else {
      error = 'Failed to fetch calendar data';
    }
  } catch (err) {
    error = (err as Error).message || 'An error occurred while fetching calendar data';
  }
}
---

<Layout>
  <div class="container mx-auto px-4 py-8">
    {user ? (
      <div class="max-w-4xl mx-auto">
        <div class="bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded mb-6">
          <h2 class="text-xl font-bold">Your Calendar with Availability</h2>
          <p>Interactive calendar view showing your Google Calendar events and personal schedule availability</p>
          {scheduleBlocks.length > 0 && (
            <div class="mt-2 text-sm">
              <p><strong>Schedule Blocks:</strong> {scheduleBlocks.length} configured</p>
              <p><strong>Availability Events:</strong> {availabilityBackgroundEvents.length} background events</p>
            </div>
          )}
        </div>
        
        <div class="bg-white rounded-lg shadow-md p-6">
          {error ? (
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
              <h3 class="font-bold">Error:</h3>
              <p>{error}</p>
              <p class="text-sm mt-2">
                {error.includes('calendar access') || error.includes('INSUFFICIENT_SCOPE') ? (
                  <>
                    <strong>Solution:</strong> You need to sign out and sign in with Google again to grant calendar permissions.
                    <br />
                    <a href="/logout" class="underline">Sign out</a> and then <a href="/login" class="underline">sign in with Google</a> again.
                  </>
                ) : (
                  'Make sure you\'re signed in with Google and have granted calendar access permissions.'
                )}
              </p>
            </div>
          ) : calendarData ? (
            <div>
              <div class="mb-4 flex justify-between items-center">
                <div>
                  <h3 class="text-lg font-semibold mb-2">Calendar Information</h3>
                  <div class="text-sm text-gray-600 space-y-1">
                    <p><strong>Time Zone:</strong> {calendarData.timeZone}</p>
                    <p><strong>Events Found:</strong> {calendarData.events.length}</p>
                  </div>
                </div>
                <button 
                  id="refreshBtn"
                  class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
                >
                  Refresh Calendar
                </button>
              </div>
              
              <div class="mb-4">
                <FullCalendarComponent 
                  events={fullCalendarEvents}
                  showEventModal={true}
                  onDateRangeChange={(startDate, endDate) => (window as unknown as { handleDateRangeChange?: (startDate: Date, endDate: Date) => void }).handleDateRangeChange?.(startDate, endDate)}
                  client:load
                />
              </div>
              
              {/* Legend for availability background events */}
              {scheduleBlocks.length > 0 && (
                <div class="mt-4 border rounded-lg p-4 bg-gray-50">
                  <h4 class="text-sm font-semibold text-gray-700 mb-2">Availability Legend</h4>
                  <div class="flex flex-wrap gap-4 text-sm">
                    <div class="flex items-center">
                      <div class="w-4 h-4 bg-green-500 rounded mr-2"></div>
                      <span>Available Time</span>
                    </div>
                    <div class="flex items-center">
                      <div class="w-4 h-4 bg-red-500 rounded mr-2"></div>
                      <span>Busy (Google Calendar)</span>
                    </div>
                    <div class="flex items-center">
                      <div class="w-4 h-4 bg-blue-500 rounded mr-2"></div>
                      <span>Schedule Block</span>
                    </div>
                  </div>
                  <p class="text-xs text-gray-600 mt-2">
                    Background colors show your availability. Regular events appear on top.
                  </p>
                </div>
              )}
              
              <div class="mt-4 border rounded-lg p-4 bg-gray-50">
                <details class="cursor-pointer">
                  <summary class="text-sm font-semibold text-gray-700 hover:text-gray-900">
                    View Raw JSON Data (Click to expand)
                  </summary>
                  <pre id="jsonOutput" class="text-sm overflow-auto max-h-96 bg-white p-4 rounded border mt-2">{JSON.stringify(calendarData, null, 2)}</pre>
                </details>
              </div>
            </div>
          ) : (
            <div class="text-center">
              <p class="text-gray-600">Loading calendar data...</p>
            </div>
          )}
          
          <div class="mt-6">
            <a 
              href="/schedule" 
              class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-4"
            >
              Schedule Management
            </a>
            <a 
              href="/" 
              class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded mr-4"
            >
              Back to Home
            </a>
            <a 
              href="/logout" 
              class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"
            >
              Logout
            </a>
          </div>
        </div>
      </div>
    ) : (
      <div class="max-w-2xl mx-auto">
        <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded mb-6">
          <h2 class="text-xl font-bold">Access Denied</h2>
          <p>You must be logged in to view your calendar.</p>
        </div>
        
        <div class="bg-white rounded-lg shadow-md p-6">
          <div class="text-center space-y-4">
            <p class="text-gray-600">Please log in to access your Google Calendar.</p>
            
            <div class="flex space-x-4 justify-center">
              <a 
                href="/login" 
                class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
              >
                Login
              </a>
              <a 
                href="/register" 
                class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"
              >
                Register
              </a>
            </div>
          </div>
        </div>
      </div>
    )}
  </div>
</Layout>

<script>
  import { setupCalendarRefreshWithJsonOutput, createDateRangeChangeHandler, setupDateRangeChangeHandler } from '../features/schedule/lib/calendar-refresh';
  
  // Setup calendar refresh button with JSON output
  setupCalendarRefreshWithJsonOutput('refreshBtn', 'jsonOutput');
  
  // Setup date range change handler
  const dateRangeHandler = createDateRangeChangeHandler('jsonOutput');
  setupDateRangeChangeHandler(dateRangeHandler);
</script>
