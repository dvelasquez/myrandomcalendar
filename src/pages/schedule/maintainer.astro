---
import { actions } from 'astro:actions';
import ScheduleForm from '../../components/ScheduleForm.tsx';
import {
  getSuccessMessageText,
  getActionErrorText,
} from '../../features/schedule/services/maintainer-handler';
import AuthLayout from '../../layouts/AuthLayout.astro';
import { Alert, AlertTitle, AlertDescription } from '@/components/ui/alert';
import { Button } from '@/components/ui/button';
import ButtonLink from '@/components/ui/button-link';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';

export const prerender = false; // Required for server actions

// Get user from middleware
const { user } = Astro.locals;

// Get query parameters
const url = new URL(Astro.request.url);
const editId = url.searchParams.get('edit');
const successMessage = url.searchParams.get('success');
const errorMessage = url.searchParams.get('error');

// Handle form submissions using Astro actions
const createResult = Astro.getActionResult(
  actions.schedule.createScheduleBlock
);
const updateResult = Astro.getActionResult(
  actions.schedule.updateScheduleBlock
);
const deleteResult = Astro.getActionResult(
  actions.schedule.deleteScheduleBlock
);

// Redirect on successful actions
if (createResult && !createResult.error) {
  return Astro.redirect('/schedule?success=created');
}
if (updateResult && !updateResult.error) {
  return Astro.redirect('/schedule/maintainer?success=updated');
}
if (deleteResult && !deleteResult.error) {
  return Astro.redirect('/schedule?success=deleted');
}

// Fetch maintainer page data using new service
let maintainerData = null;

if (user) {
  try {
    const formData = new FormData();
    if (editId) formData.append('editId', editId);
    if (successMessage) formData.append('successMessage', successMessage);
    if (errorMessage) formData.append('errorMessage', errorMessage);
    if (createResult?.error)
      formData.append('createError', createResult.error.message);
    if (updateResult?.error)
      formData.append('updateError', updateResult.error.message);
    if (deleteResult?.error)
      formData.append('deleteError', deleteResult.error.message);

    const result = await Astro.callAction(
      actions.schedule.getMaintainerPageData,
      formData
    );
    if (result.data) {
      maintainerData = result.data;
    }
  } catch (error) {
    console.error('Error fetching maintainer page data:', error);
  }
}
---

<AuthLayout title="Schedule Maintainer - My Random Calendar">
  <div class="container mx-auto px-4 py-8">
    {
      user && maintainerData ? (
        <div class="max-w-4xl mx-auto">
          <div class="mb-8">
            <div class="flex justify-between items-start">
              <div>
                <h1 class="text-3xl font-bold text-gray-900 mb-2">
                  {maintainerData.editingBlock
                    ? 'Edit Schedule Block'
                    : 'Create Schedule Block'}
                </h1>
                <p class="text-gray-600">
                  {maintainerData.editingBlock
                    ? 'Update your schedule block details'
                    : 'Add a new schedule block to manage your time'}
                </p>
              </div>
              <ButtonLink variant="secondary" href="/schedule">
                Back to Schedule
              </ButtonLink>
            </div>
          </div>

          {maintainerData.successMessage && (
            <Alert className="mb-6 border-green-400 bg-green-50 text-green-800">
              <AlertTitle>Success!</AlertTitle>
              <AlertDescription>
                {getSuccessMessageText(maintainerData.successMessage)}
              </AlertDescription>
            </Alert>
          )}

          {maintainerData.errorMessage && (
            <Alert variant="destructive" className="mb-6">
              <AlertTitle>Error:</AlertTitle>
              <AlertDescription>{maintainerData.errorMessage}</AlertDescription>
            </Alert>
          )}

          {(() => {
            const actionError = getActionErrorText(maintainerData.actionErrors);
            if (actionError) {
              return (
                <Alert variant="destructive" className="mb-6">
                  <AlertTitle>Error:</AlertTitle>
                  <AlertDescription>{actionError}</AlertDescription>
                </Alert>
              );
            }
          })()}

          <Card>
            <CardHeader>
              <CardTitle className="text-xl">
                {maintainerData.editingBlock
                  ? 'Edit Schedule Block'
                  : 'Create Schedule Block'}
              </CardTitle>
            </CardHeader>

            <CardContent>
              <ScheduleForm
                client:load
                initialData={maintainerData.editingBlock}
                formOptions={maintainerData.formOptions}
              />
            </CardContent>
          </Card>

          {maintainerData.scheduleBlocks.length > 0 && (
            <Card className="mt-8">
              <CardHeader>
                <CardTitle className="text-xl">
                  Existing Schedule Blocks
                </CardTitle>
              </CardHeader>

              <CardContent>
                <div class="space-y-4">
                  {maintainerData.scheduleBlocks.map(block => (
                    <div class="border rounded-lg p-4 flex justify-between items-center">
                      <div>
                        <h3 class="font-medium text-gray-900">{block.title}</h3>
                        <p class="text-sm text-gray-600">
                          {block.startTime} - {block.endTime} | {block.type} |{' '}
                          {block.priority}
                        </p>
                      </div>
                      <div class="flex space-x-2">
                        <ButtonLink
                          href={`/schedule/maintainer?edit=${block.id}`}
                          variant="outline"
                          size="sm"
                        >
                          Edit
                        </ButtonLink>
                        <form
                          method="POST"
                          action={actions.schedule.deleteScheduleBlock}
                          class="inline"
                        >
                          <input type="hidden" name="id" value={block.id} />
                          <Button
                            type="submit"
                            variant="destructive"
                            size="sm"
                            onClick={e => {
                              if (
                                !confirm(
                                  'Are you sure you want to delete this schedule block?'
                                )
                              ) {
                                e.preventDefault();
                              }
                            }}
                          >
                            Delete
                          </Button>
                        </form>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}
        </div>
      ) : (
        <div class="max-w-2xl mx-auto">
          <Alert className="mb-6 border-yellow-400 bg-yellow-50 text-yellow-800">
            <AlertTitle>Access Denied</AlertTitle>
            <AlertDescription>
              You must be logged in to manage your schedule blocks.
            </AlertDescription>
          </Alert>

          <Card>
            <CardContent>
              <div class="text-center space-y-4">
                <p class="text-gray-600">
                  Please log in to access your schedule management.
                </p>

                <div class="flex space-x-4 justify-center">
                  <ButtonLink href="/login">Login</ButtonLink>
                  <ButtonLink variant="secondary" href="/register">
                    Register
                  </ButtonLink>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )
    }
  </div>
</AuthLayout>

<script>
  import { initializeDaysOfWeekHandler } from '../../features/schedule/lib/form-handlers';

  // Initialize days of week checkbox handler
  initializeDaysOfWeekHandler();
</script>
