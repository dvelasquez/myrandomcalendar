---
import { actions } from 'astro:actions';
import type { ScheduleBlock } from '../../features/schedule/models/ScheduleBlocks.types';
import { SCHEDULE_TYPES, PRIORITIES, DAYS_OF_WEEK, isDaySelected } from '../../features/schedule/services/constants';
import Layout from '../../layouts/Layout.astro';

export const prerender = false; // Required for server actions

// Get user from middleware
const { user } = Astro.locals;

// Get query parameters
const url = new URL(Astro.request.url);
const editId = url.searchParams.get('edit');
const successMessage = url.searchParams.get('success');
const errorMessage = url.searchParams.get('error');

// Handle form submissions using Astro actions
const createResult = Astro.getActionResult(actions.schedule.createScheduleBlock);
const updateResult = Astro.getActionResult(actions.schedule.updateScheduleBlock);
const deleteResult = Astro.getActionResult(actions.schedule.deleteScheduleBlock);

// Redirect on successful actions
if (createResult && !createResult.error) {
  return Astro.redirect('/schedule?success=created');
}
if (updateResult && !updateResult.error) {
  return Astro.redirect('/schedule/maintainer?success=updated');
}
if (deleteResult && !deleteResult.error) {
  return Astro.redirect('/schedule?success=deleted');
}

// Fetch schedule blocks using Astro.callAction
let scheduleBlocks: ScheduleBlock[] = [];
let editingBlock: ScheduleBlock | undefined;

if (user) {
  try {
    const { data, error } = await Astro.callAction(actions.schedule.getScheduleBlocks, new FormData());
    if (!error && data) {
      scheduleBlocks = data;
      
      // If editing, find the block
      if (editId) {
        editingBlock = scheduleBlocks.find(block => block.id === editId);
      }
    }
  } catch (error) {
    console.error('Error fetching schedule blocks:', error);
  }
}
---

<Layout>
  <div class="container mx-auto px-4 py-8">
    {user ? (
      <div class="max-w-4xl mx-auto">
        <!-- Header -->
        <div class="mb-8">
          <div class="flex justify-between items-start">
            <div>
              <h1 class="text-3xl font-bold text-gray-900 mb-2">
                {editingBlock ? 'Edit Schedule Block' : 'Create Schedule Block'}
              </h1>
              <p class="text-gray-600">
                {editingBlock ? 'Update your schedule block details' : 'Add a new schedule block to manage your time'}
              </p>
            </div>
            <a 
              href="/schedule" 
              class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded"
            >
              Back to Schedule
            </a>
          </div>
        </div>

        <!-- Success/Error Messages -->
        {successMessage && (
          <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-6">
            <h3 class="font-bold">Success!</h3>
            <p>
              {successMessage === 'created' && 'Schedule block created successfully!'}
              {successMessage === 'updated' && 'Schedule block updated successfully!'}
              {successMessage === 'deleted' && 'Schedule block deleted successfully!'}
            </p>
          </div>
        )}
        
        {errorMessage && (
          <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
            <h3 class="font-bold">Error:</h3>
            <p>{errorMessage}</p>
          </div>
        )}

        <!-- Handle action results -->
        {(() => {
          const createResult = Astro.getActionResult(actions.schedule.createScheduleBlock);
          const updateResult = Astro.getActionResult(actions.schedule.updateScheduleBlock);
          const deleteResult = Astro.getActionResult(actions.schedule.deleteScheduleBlock);
          
          // Show create action errors
          if (createResult?.error) {
            return (
              <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
                <h3 class="font-bold">Error:</h3>
                <p>{createResult.error.message}</p>
              </div>
            );
          }
          
          // Show update action errors
          if (updateResult?.error) {
            return (
              <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
                <h3 class="font-bold">Error:</h3>
                <p>{updateResult.error.message}</p>
              </div>
            );
          }
          
          // Show delete action errors
          if (deleteResult?.error) {
            return (
              <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
                <h3 class="font-bold">Error:</h3>
                <p>{deleteResult.error.message}</p>
              </div>
            );
          }
        })()}

        <!-- Schedule Block Form -->
        <div class="bg-white rounded-lg shadow-md p-6">
          <form method="POST" action={editingBlock ? actions.schedule.updateScheduleBlock : actions.schedule.createScheduleBlock} class="space-y-6">
            <!-- Hidden fields -->
            {editingBlock && <input type="hidden" name="id" value={editingBlock.id} />}
            <input type="hidden" name="timezone" value="UTC" />

            <!-- Basic Information -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label for="title" class="block text-sm font-medium text-gray-700 mb-2">
                  Title *
                </label>
                <input
                  type="text"
                  id="title"
                  name="title"
                  value={editingBlock?.title || ''}
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="e.g., Work Hours, Sleep Time"
                  required
                />
              </div>

              <div>
                <label for="type" class="block text-sm font-medium text-gray-700 mb-2">
                  Type *
                </label>
                <select
                  id="type"
                  name="type"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                >
                  {SCHEDULE_TYPES.map(type => (
                    <option value={type.value} selected={editingBlock?.type === type.value || (!editingBlock && type.value === 'work')}>
                      {type.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            <!-- Time Settings -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label for="startTime" class="block text-sm font-medium text-gray-700 mb-2">
                  Start Time *
                </label>
                <input
                  type="time"
                  id="startTime"
                  name="startTime"
                  value={editingBlock?.startTime || '09:00'}
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                />
              </div>

              <div>
                <label for="endTime" class="block text-sm font-medium text-gray-700 mb-2">
                  End Time *
                </label>
                <input
                  type="time"
                  id="endTime"
                  name="endTime"
                  value={editingBlock?.endTime || '17:00'}
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                />
              </div>
            </div>

            <!-- Days of Week -->
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">
                Days of Week *
              </label>
              <div class="grid grid-cols-7 gap-2">
                {DAYS_OF_WEEK.map(day => (
                  <label class="flex flex-col items-center p-2 text-sm rounded-md border cursor-pointer hover:bg-gray-50">
                    <input
                      type="checkbox"
                      name="daysOfWeekCheckbox"
                      value={day.value}
                      checked={editingBlock?.daysOfWeek ? isDaySelected(editingBlock.daysOfWeek, day.value) : false}
                      class="mb-1 daysOfWeekCheckbox"
                    />
                    <span class="font-medium">{day.short}</span>
                  </label>
                ))}
              </div>
              <!-- Hidden input to send daysOfWeek as JSON -->
              <input type="hidden" name="daysOfWeek" value={JSON.stringify(editingBlock?.daysOfWeek || [1, 2, 3, 4, 5])} id="daysOfWeekJson" />
            </div>

            <!-- Priority and Settings -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label for="priority" class="block text-sm font-medium text-gray-700 mb-2">
                  Priority
                </label>
                <select
                  id="priority"
                  name="priority"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  {PRIORITIES.map(priority => (
                    <option value={priority.value} selected={editingBlock?.priority === priority.value || (!editingBlock && priority.value === 'medium')}>
                      {priority.label}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label for="color" class="block text-sm font-medium text-gray-700 mb-2">
                  Color
                </label>
                <input
                  type="color"
                  id="color"
                  name="color"
                  value={editingBlock?.color || '#3b82f6'}
                  class="w-full h-10 border border-gray-300 rounded cursor-pointer"
                />
              </div>
            </div>

            <!-- Buffer Times -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label for="bufferBefore" class="block text-sm font-medium text-gray-700 mb-2">
                  Buffer Before (minutes)
                </label>
                <input
                  type="number"
                  id="bufferBefore"
                  name="bufferBefore"
                  value={editingBlock?.bufferBefore || 0}
                  min="0"
                  max="120"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label for="bufferAfter" class="block text-sm font-medium text-gray-700 mb-2">
                  Buffer After (minutes)
                </label>
                <input
                  type="number"
                  id="bufferAfter"
                  name="bufferAfter"
                  value={editingBlock?.bufferAfter || 0}
                  min="0"
                  max="120"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
            </div>

            <!-- Description -->
            <div>
              <label for="description" class="block text-sm font-medium text-gray-700 mb-2">
                Description
              </label>
              <textarea
                id="description"
                name="description"
                rows="3"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Optional description or notes about this schedule block"
              >{editingBlock?.description || ''}</textarea>
            </div>

            <!-- Settings -->
            <div class="flex items-center space-x-6">
              <label class="flex items-center">
                <input
                  type="checkbox"
                  name="isRecurring"
                  value="true"
                  checked={editingBlock?.isRecurring ?? true}
                  class="mr-2"
                />
                <span class="text-sm text-gray-700">Recurring</span>
              </label>

              <label class="flex items-center">
                <input
                  type="checkbox"
                  name="isActive"
                  value="true"
                  checked={editingBlock?.isActive ?? true}
                  class="mr-2"
                />
                <span class="text-sm text-gray-700">Active</span>
              </label>
            </div>
            

            <!-- Form Actions -->
            <div class="flex justify-end space-x-4 pt-6 border-t">
              <a
                href="/schedule"
                class="px-4 py-2 text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300 transition-colors"
              >
                Cancel
              </a>
              <button
                type="submit"
                class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
              >
                {editingBlock ? 'Update' : 'Create'}
              </button>
            </div>
          </form>
        </div>

        <!-- Existing Schedule Blocks -->
        {scheduleBlocks.length > 0 && (
          <div class="mt-8 bg-white rounded-lg shadow-md p-6">
            <h2 class="text-xl font-bold text-gray-900 mb-4">Existing Schedule Blocks</h2>
            <div class="space-y-4">
              {scheduleBlocks.map(block => (
                <div class="border rounded-lg p-4 flex justify-between items-center">
                  <div>
                    <h3 class="font-medium text-gray-900">{block.title}</h3>
                    <p class="text-sm text-gray-600">
                      {block.startTime} - {block.endTime} | {block.type} | {block.priority}
                    </p>
                  </div>
                  <div class="flex space-x-2">
                    <a
                      href={`/schedule/maintainer?edit=${block.id}`}
                      class="px-3 py-1 text-xs bg-blue-100 text-blue-800 rounded-md hover:bg-blue-200 transition-colors"
                    >
                      Edit
                    </a>
                    <form method="POST" action={actions.schedule.deleteScheduleBlock} class="inline">
                      <input type="hidden" name="id" value={block.id} />
                      <button
                        type="submit"
                        class="px-3 py-1 text-xs bg-red-100 text-red-800 rounded-md hover:bg-red-200 transition-colors"
                        onclick="return confirm('Are you sure you want to delete this schedule block?')"
                      >
                        Delete
                      </button>
                    </form>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    ) : (
      <div class="max-w-2xl mx-auto">
        <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded mb-6">
          <h2 class="text-xl font-bold">Access Denied</h2>
          <p>You must be logged in to manage your schedule blocks.</p>
        </div>
        
        <div class="bg-white rounded-lg shadow-md p-6">
          <div class="text-center space-y-4">
            <p class="text-gray-600">Please log in to access your schedule management.</p>
            
            <div class="flex space-x-4 justify-center">
              <a 
                href="/login" 
                class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
              >
                Login
              </a>
              <a 
                href="/register" 
                class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"
              >
                Register
              </a>
            </div>
          </div>
        </div>
      </div>
    )}
  </div>
</Layout>

<script>
  import { initializeDaysOfWeekHandler } from '../../features/schedule/lib/form-handlers';
  
  // Initialize days of week checkbox handler
  initializeDaysOfWeekHandler();
</script>
