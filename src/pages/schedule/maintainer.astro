---
import { actions } from 'astro:actions';
import { isDaySelected } from '../../features/schedule/services/constants';
import { getSuccessMessageText, getActionErrorText } from '../../features/schedule/services/maintainer-handler';
import Layout from '../../layouts/Layout.astro';
import { Button } from '@/components/ui/button';
import ButtonLink from '@/components/ui/button-link';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';

export const prerender = false; // Required for server actions

// Get user from middleware
const { user } = Astro.locals;

// Get query parameters
const url = new URL(Astro.request.url);
const editId = url.searchParams.get('edit');
const successMessage = url.searchParams.get('success');
const errorMessage = url.searchParams.get('error');

// Handle form submissions using Astro actions
const createResult = Astro.getActionResult(actions.schedule.createScheduleBlock);
const updateResult = Astro.getActionResult(actions.schedule.updateScheduleBlock);
const deleteResult = Astro.getActionResult(actions.schedule.deleteScheduleBlock);

// Redirect on successful actions
if (createResult && !createResult.error) {
  return Astro.redirect('/schedule?success=created');
}
if (updateResult && !updateResult.error) {
  return Astro.redirect('/schedule/maintainer?success=updated');
}
if (deleteResult && !deleteResult.error) {
  return Astro.redirect('/schedule?success=deleted');
}

// Fetch maintainer page data using new service
let maintainerData = null;

if (user) {
  try {
    const formData = new FormData();
    if (editId) formData.append('editId', editId);
    if (successMessage) formData.append('successMessage', successMessage);
    if (errorMessage) formData.append('errorMessage', errorMessage);
    if (createResult?.error) formData.append('createError', createResult.error.message);
    if (updateResult?.error) formData.append('updateError', updateResult.error.message);
    if (deleteResult?.error) formData.append('deleteError', deleteResult.error.message);
    
    const result = await Astro.callAction(actions.schedule.getMaintainerPageData, formData);
    if (result.data) {
      maintainerData = result.data;
    }
  } catch (error) {
    console.error('Error fetching maintainer page data:', error);
  }
}
---

<Layout>
  <div class="container mx-auto px-4 py-8">
    {user && maintainerData ? (
      <div class="max-w-4xl mx-auto">
        <!-- Header -->
        <div class="mb-8">
          <div class="flex justify-between items-start">
            <div>
              <h1 class="text-3xl font-bold text-gray-900 mb-2">
                {maintainerData.editingBlock ? 'Edit Schedule Block' : 'Create Schedule Block'}
              </h1>
              <p class="text-gray-600">
                {maintainerData.editingBlock ? 'Update your schedule block details' : 'Add a new schedule block to manage your time'}
              </p>
            </div>
            <ButtonLink variant="secondary" href="/schedule">
              Back to Schedule
            </ButtonLink>
          </div>
        </div>

        <!-- Success/Error Messages -->
        {maintainerData.successMessage && (
          <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-6">
            <h3 class="font-bold">Success!</h3>
            <p>{getSuccessMessageText(maintainerData.successMessage)}</p>
          </div>
        )}
        
        {maintainerData.errorMessage && (
          <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
            <h3 class="font-bold">Error:</h3>
            <p>{maintainerData.errorMessage}</p>
          </div>
        )}

        <!-- Handle action results -->
        {(() => {
          const actionError = getActionErrorText(maintainerData.actionErrors);
          if (actionError) {
            return (
              <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
                <h3 class="font-bold">Error:</h3>
                <p>{actionError}</p>
              </div>
            );
          }
        })()}

        <!-- Schedule Block Form -->
        <Card>
          <CardHeader>
            <CardTitle className="text-xl">
              {maintainerData.editingBlock ? 'Edit Schedule Block' : 'Create Schedule Block'}
            </CardTitle>
          </CardHeader>
          
          <CardContent>
            <form method="POST" action={maintainerData.editingBlock ? actions.schedule.updateScheduleBlock : actions.schedule.createScheduleBlock} class="space-y-6">
              <!-- Hidden fields -->
              {maintainerData.editingBlock && <input type="hidden" name="id" value={maintainerData.editingBlock.id} />}
              <input type="hidden" name="timezone" value="UTC" />

              <!-- Basic Information -->
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label for="title" class="block text-sm font-medium text-gray-700 mb-2">
                    Title *
                  </label>
                  <input
                    type="text"
                    id="title"
                    name="title"
                    value={maintainerData.editingBlock?.title || ''}
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="e.g., Work Hours, Sleep Time"
                    required
                  />
                </div>

                <div>
                  <label for="type" class="block text-sm font-medium text-gray-700 mb-2">
                    Type *
                  </label>
                  <select
                    id="type"
                    name="type"
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  >
                    {maintainerData.formOptions.scheduleTypes.map(type => (
                      <option value={type.value} selected={maintainerData.editingBlock?.type === type.value || (!maintainerData.editingBlock && type.value === 'work')}>
                        {type.label}
                      </option>
                    ))}
                  </select>
                </div>
              </div>

              <!-- Time Settings -->
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label for="startTime" class="block text-sm font-medium text-gray-700 mb-2">
                    Start Time *
                  </label>
                  <input
                    type="time"
                    id="startTime"
                    name="startTime"
                    value={maintainerData.editingBlock?.startTime || '09:00'}
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>

                <div>
                  <label for="endTime" class="block text-sm font-medium text-gray-700 mb-2">
                    End Time *
                  </label>
                  <input
                    type="time"
                    id="endTime"
                    name="endTime"
                    value={maintainerData.editingBlock?.endTime || '17:00'}
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>
              </div>

              <!-- Days of Week -->
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">
                  Days of Week *
                </label>
                <div class="grid grid-cols-7 gap-2">
                  {maintainerData.formOptions.daysOfWeek.map(day => (
                    <label class="flex flex-col items-center p-2 text-sm rounded-md border cursor-pointer hover:bg-gray-50">
                      <input
                        type="checkbox"
                        name="daysOfWeekCheckbox"
                        value={day.value}
                        checked={maintainerData.editingBlock?.daysOfWeek ? isDaySelected(maintainerData.editingBlock.daysOfWeek, day.value) : false}
                        class="mb-1 daysOfWeekCheckbox"
                      />
                      <span class="font-medium">{day.short}</span>
                    </label>
                  ))}
                </div>
                <!-- Hidden input to send daysOfWeek as JSON -->
                <input type="hidden" name="daysOfWeek" value={JSON.stringify(maintainerData.editingBlock?.daysOfWeek || [1, 2, 3, 4, 5])} id="daysOfWeekJson" />
              </div>

              <!-- Priority and Settings -->
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label for="priority" class="block text-sm font-medium text-gray-700 mb-2">
                    Priority
                  </label>
                  <select
                    id="priority"
                    name="priority"
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    {maintainerData.formOptions.priorities.map(priority => (
                      <option value={priority.value} selected={maintainerData.editingBlock?.priority === priority.value || (!maintainerData.editingBlock && priority.value === 'medium')}>
                        {priority.label}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label for="color" class="block text-sm font-medium text-gray-700 mb-2">
                    Color
                  </label>
                  <input
                    type="color"
                    id="color"
                    name="color"
                    value={maintainerData.editingBlock?.color || '#3b82f6'}
                    class="w-full h-10 border border-gray-300 rounded cursor-pointer"
                  />
                </div>
              </div>

              <!-- Buffer Times -->
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label for="bufferBefore" class="block text-sm font-medium text-gray-700 mb-2">
                    Buffer Before (minutes)
                  </label>
                  <input
                    type="number"
                    id="bufferBefore"
                    name="bufferBefore"
                    value={maintainerData.editingBlock?.bufferBefore || 0}
                    min="0"
                    max="120"
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label for="bufferAfter" class="block text-sm font-medium text-gray-700 mb-2">
                    Buffer After (minutes)
                  </label>
                  <input
                    type="number"
                    id="bufferAfter"
                    name="bufferAfter"
                    value={maintainerData.editingBlock?.bufferAfter || 0}
                    min="0"
                    max="120"
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
              </div>

              <!-- Description -->
              <div>
                <label for="description" class="block text-sm font-medium text-gray-700 mb-2">
                  Description
                </label>
                <textarea
                  id="description"
                  name="description"
                  rows="3"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Optional description or notes about this schedule block"
                >{maintainerData.editingBlock?.description || ''}</textarea>
              </div>

              <!-- Settings -->
              <div class="flex items-center space-x-6">
                <label class="flex items-center">
                  <input
                    type="checkbox"
                    name="isRecurring"
                    value="true"
                    checked={maintainerData.editingBlock?.isRecurring ?? true}
                    class="mr-2"
                  />
                  <span class="text-sm text-gray-700">Recurring</span>
                </label>

                <label class="flex items-center">
                  <input
                    type="checkbox"
                    name="isActive"
                    value="true"
                    checked={maintainerData.editingBlock?.isActive ?? true}
                    class="mr-2"
                  />
                  <span class="text-sm text-gray-700">Active</span>
                </label>
              </div>
              

              <!-- Form Actions -->
              <div class="flex justify-end space-x-4 pt-6 border-t">
                <ButtonLink variant="outline" href="/schedule">
                  Cancel
                </ButtonLink>
                <Button type="submit">
                  {maintainerData.editingBlock ? 'Update' : 'Create'}
                </Button>
              </div>
            </form>
          </CardContent>
        </Card>

        <!-- Existing Schedule Blocks -->
        {maintainerData.scheduleBlocks.length > 0 && (
          <Card className="mt-8">
            <CardHeader>
              <CardTitle className="text-xl">Existing Schedule Blocks</CardTitle>
            </CardHeader>
            
            <CardContent>
              <div class="space-y-4">
                {maintainerData.scheduleBlocks.map(block => (
                  <div class="border rounded-lg p-4 flex justify-between items-center">
                    <div>
                      <h3 class="font-medium text-gray-900">{block.title}</h3>
                      <p class="text-sm text-gray-600">
                        {block.startTime} - {block.endTime} | {block.type} | {block.priority}
                      </p>
                    </div>
                    <div class="flex space-x-2">
                      <ButtonLink
                        href={`/schedule/maintainer?edit=${block.id}`}
                        variant="outline"
                        size="sm"
                      >
                        Edit
                      </ButtonLink>
                      <form method="POST" action={actions.schedule.deleteScheduleBlock} class="inline">
                        <input type="hidden" name="id" value={block.id} />
                        <Button
                          type="submit"
                          variant="destructive"
                          size="sm"
                          onClick={(e) => {
                            if (!confirm('Are you sure you want to delete this schedule block?')) {
                              e.preventDefault();
                            }
                          }}
                        >
                          Delete
                        </Button>
                      </form>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    ) : (
      <div class="max-w-2xl mx-auto">
        <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded mb-6">
          <h2 class="text-xl font-bold">Access Denied</h2>
          <p>You must be logged in to manage your schedule blocks.</p>
        </div>
        
        <Card>
          <CardContent>
            <div class="text-center space-y-4">
              <p class="text-gray-600">Please log in to access your schedule management.</p>
              
              <div class="flex space-x-4 justify-center">
                <ButtonLink href="/login">
                  Login
                </ButtonLink>
                <ButtonLink variant="secondary" href="/register">
                  Register
                </ButtonLink>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    )}
  </div>
</Layout>

<script>
  import { initializeDaysOfWeekHandler } from '../../features/schedule/lib/form-handlers';
  
  // Initialize days of week checkbox handler
  initializeDaysOfWeekHandler();
</script>