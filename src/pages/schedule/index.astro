---
import { actions } from 'astro:actions';
import { startOfDay, endOfDay, format, addDays, subDays } from 'date-fns';
import { createDefaultScheduleBlocksAction } from '../../actions/schedule-block-actions';
import { getScheduleBlocks } from '../../actions/schedule-blocks';
import Layout from '../../layouts/Layout.astro';
import { calculateAvailability, DEFAULT_AVAILABILITY_CONFIG, type TimeSlot } from '../../lib/availability-calculator';
import { transformGoogleApiEventsToFullCalendar } from '../../lib/event-transformers';
import type { ScheduleBlock, CalendarEvent, GoogleCalendarApiEvent } from '../../lib/types';
import { createFetchCalendarFormData } from '../../lib/types';

export const prerender = false; // Required for server actions

// Get user from middleware
const { user } = Astro.locals;

// Get query parameters for state management
const url = new URL(Astro.request.url);
const activeTab = url.searchParams.get('tab') || 'blocks';
const selectedDateParam = url.searchParams.get('date');
const selectedDate = selectedDateParam ? new Date(selectedDateParam) : new Date();
const successMessage = url.searchParams.get('success');
const errorMessage = url.searchParams.get('error');

// Handle form submissions for default schedule creation
if (Astro.request.method === 'POST' && user) {
  const formData = await Astro.request.formData();
  const action = formData.get('action') as string;
  
  if (action === 'create-default') {
    try {
      const result = await createDefaultScheduleBlocksAction(formData);
        if (result.data?.success) {
        return Astro.redirect('/schedule?success=default-created');
        } else {
        return Astro.redirect(`/schedule?error=${encodeURIComponent(result.error?.message || 'Failed to create default schedule blocks')}`);
      }
    } catch (error) {
      console.error('Error creating default schedule blocks:', error);
      return Astro.redirect('/schedule?error=' + encodeURIComponent('An error occurred'));
    }
  }
}

// Fetch schedule blocks server-side
let scheduleBlocks: ScheduleBlock[] = [];
if (user) {
  try {
    scheduleBlocks = await getScheduleBlocks(user.id);
  } catch (error) {
    console.error('Error fetching schedule blocks:', error);
  }
}

// Fetch calendar events based on active tab
let googleCalendarEvents: CalendarEvent[] = [];
let calendarError: string | null = null;
let availabilityTimeSlots: TimeSlot[] = [];

if (user) {
  try {
    let startDate: Date;
    let endDate: Date;
    
    if (activeTab === 'availability') {
      // For availability tab, only fetch the selected day
      startDate = startOfDay(selectedDate);
      endDate = endOfDay(selectedDate);
    } else {
      // For blocks tab, fetch current month
      const startDateParam = url.searchParams.get('startDate');
      const endDateParam = url.searchParams.get('endDate');
      const today = new Date();
      startDate = startDateParam ? new Date(startDateParam) : startOfDay(today);
      endDate = endDateParam ? new Date(endDateParam) : endOfDay(today);
    }
    
    // Create typesafe FormData with proper date range
    const formData = createFetchCalendarFormData(startDate, endDate);
    
    const result = await Astro.callAction(actions.fetchCalendar, formData);
    if (result.data?.success) {
      // Transform Google Calendar API events to CalendarEvent format
      const googleApiEvents = result.data.events as GoogleCalendarApiEvent[];
      googleCalendarEvents = transformGoogleApiEventsToFullCalendar(googleApiEvents);
      
      // Calculate availability if we're on the availability tab
      if (activeTab === 'availability') {
        availabilityTimeSlots = await calculateAvailability(
          selectedDate,
          scheduleBlocks,
          googleCalendarEvents,
          DEFAULT_AVAILABILITY_CONFIG
        );
      }
    } else {
      calendarError = result.error?.message || 'Failed to fetch calendar data';
      console.warn('Calendar fetch error:', calendarError);
    }
  } catch (err) {
    calendarError = (err as Error).message || 'An error occurred while fetching calendar data';
    console.error('Calendar fetch error:', err);
  }
}

// Schedule types for display
const PRIORITY_COLORS: Record<string, string> = {
  high: 'bg-red-100 text-red-800 border-red-200',
  medium: 'bg-yellow-100 text-yellow-800 border-yellow-200',
  low: 'bg-green-100 text-green-800 border-green-200'
};
---

<Layout>
  <div class="container mx-auto px-4 py-8">
    {user ? (
      <div class="max-w-6xl mx-auto">
        <!-- Header -->
        <div class="mb-8">
          <div class="flex justify-between items-start">
            <div>
              <h1 class="text-3xl font-bold text-gray-900 mb-2">Schedule Management</h1>
              <p class="text-gray-600">
                View and manage your schedule blocks and availability for optimal event planning.
              </p>
              {!calendarError && (
                <p class="text-sm mt-2">
                  <strong>Google Calendar Events:</strong> {googleCalendarEvents.length} events loaded
                </p>
              )}
            </div>
            <div class="flex space-x-4">
              <a 
                href="/schedule/maintainer" 
                class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
              >
                Manage Schedule
              </a>
            <button 
              id="refreshCalendarBtn"
                class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded text-sm"
            >
              Refresh Calendar
            </button>
            </div>
          </div>
        </div>
        
        <!-- Success/Error Messages -->
        {successMessage && (
          <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-6">
            <h3 class="font-bold">Success!</h3>
            <p>
              {successMessage === 'default-created' && 'Default schedule blocks created successfully!'}
            </p>
          </div>
        )}
        
        {errorMessage && (
          <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
            <h3 class="font-bold">Error:</h3>
            <p>{errorMessage}</p>
          </div>
        )}
        
        {calendarError ? (
          <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded mb-6">
            <h3 class="font-bold">Google Calendar Integration Notice:</h3>
            <p class="mb-2">{calendarError}</p>
            <p class="text-sm">
              {calendarError.includes('calendar access') || calendarError.includes('INSUFFICIENT_SCOPE') ? (
                <>
                  <strong>Solution:</strong> You need to sign out and sign in with Google again to grant calendar permissions.
                  <br />
                  <a href="/logout" class="underline">Sign out</a> and then <a href="/login" class="underline">sign in with Google</a> again.
                </>
              ) : (
                'Make sure you\'re signed in with Google and have granted calendar access permissions.'
              )}
            </p>
          </div>
        ) : null}
        
        <!-- Tabs -->
        <div class="mb-6">
          <div class="border-b border-gray-200">
            <nav class="-mb-px flex space-x-8">
              <a
                href="/schedule?tab=blocks"
                class={`py-2 px-1 border-b-2 font-medium text-sm transition-colors ${
                  activeTab === 'blocks'
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                Schedule Blocks ({scheduleBlocks.length})
              </a>
              <a
                href="/schedule?tab=availability"
                class={`py-2 px-1 border-b-2 font-medium text-sm transition-colors ${
                  activeTab === 'availability'
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                Availability
              </a>
            </nav>
          </div>
        </div>

        <!-- Tab Content -->
        {activeTab === 'blocks' && (
          <div class="bg-white rounded-lg shadow-md p-6">
            <div class="flex justify-between items-center mb-6">
              <h2 class="text-2xl font-bold text-gray-900">Schedule Blocks</h2>
              <div class="flex space-x-4">
                <a
                  href="/schedule/maintainer"
                  class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded transition-colors"
                >
                  Create New Schedule
                </a>
                {scheduleBlocks.length === 0 && (
                  <form method="POST" action="/schedule" class="inline">
                    <input type="hidden" name="action" value="create-default" />
                    <button
                      type="submit"
                      class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition-colors"
                    >
                      Create Default Schedule
                    </button>
        </form>
                )}
              </div>
            </div>

            {scheduleBlocks.length === 0 ? (
              <div class="text-center py-12">
                <div class="text-gray-400 text-6xl mb-4">📅</div>
                <h3 class="text-lg font-medium text-gray-900 mb-2">No schedule blocks found</h3>
                <p class="text-gray-500 mb-4">Create your first schedule block to get started</p>
                <a
                  href="/schedule/maintainer"
                  class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors"
                >
                  Create Schedule Block
                </a>
              </div>
            ) : (
              <div class="space-y-6">
                {scheduleBlocks.map(block => (
                  <div
                    class={`border rounded-lg p-4 transition-colors ${
                      block.isActive 
                        ? 'bg-white border-gray-200 hover:border-gray-300' 
                        : 'bg-gray-50 border-gray-200 opacity-75'
                    }`}
                  >
                    <div class="flex items-start justify-between">
                      <div class="flex-1">
                        <div class="flex items-center space-x-3 mb-2">
                          <h4 class="text-lg font-medium text-gray-900">
                            {block.title}
                          </h4>
                          <span class={`px-2 py-1 text-xs font-medium rounded-full border ${
                            PRIORITY_COLORS[block.priority]
                          }`}>
                            {block.priority}
                          </span>
                          {!block.isActive && (
                            <span class="px-2 py-1 text-xs font-medium rounded-full bg-gray-100 text-gray-600 border border-gray-200">
                              Inactive
                            </span>
                          )}
                        </div>
                        
                        <div class="text-sm text-gray-600 space-y-1">
                          <div class="flex items-center space-x-4">
                            <span>⏰ {block.startTime} - {block.endTime}</span>
                            <span>📅 {block.daysOfWeek.map(day => {
                              const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
                              return dayNames[day];
                            }).join(', ')}</span>
                          </div>
                          
                          {block.description && (
                            <p class="text-gray-500">{block.description}</p>
                          )}
                          
                          {(block.bufferBefore > 0 || block.bufferAfter > 0) && (
                            <div class="text-xs text-gray-500">
                              Buffer: {block.bufferBefore > 0 && `-${block.bufferBefore}min`} 
                              {block.bufferBefore > 0 && block.bufferAfter > 0 && ', '}
                              {block.bufferAfter > 0 && `+${block.bufferAfter}min`}
                            </div>
                          )}
                        </div>
                      </div>
                      
                      <div class="flex items-center space-x-2 ml-4">
                        <a
                          href={`/schedule/maintainer?edit=${block.id}`}
                          class="px-3 py-1 text-xs bg-blue-100 text-blue-800 rounded-md hover:bg-blue-200 transition-colors"
                        >
                          Edit
                        </a>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}

        {activeTab === 'availability' && (
        <div class="bg-white rounded-lg shadow-md p-6">
            <div class="flex justify-between items-center mb-6">
              <h2 class="text-2xl font-bold text-gray-900">Availability</h2>
              <div class="flex items-center space-x-4">
                <!-- Day Navigation -->
                <div class="flex items-center space-x-2">
                  <a
                    href={`/schedule?tab=availability&date=${format(subDays(selectedDate, 1), 'yyyy-MM-dd')}`}
                    class="px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded hover:bg-gray-200 transition-colors"
                  >
                    ← Previous
                  </a>
                  <span class="px-4 py-2 text-lg font-medium text-gray-900">
                    {format(selectedDate, 'EEEE, MMMM d, yyyy')}
                  </span>
                  <a
                    href={`/schedule?tab=availability&date=${format(addDays(selectedDate, 1), 'yyyy-MM-dd')}`}
                    class="px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded hover:bg-gray-200 transition-colors"
                  >
                    Next →
                  </a>
                </div>
                
                <!-- Today Button -->
                <a
                  href={`/schedule?tab=availability&date=${format(new Date(), 'yyyy-MM-dd')}`}
                  class="px-3 py-1 text-sm bg-blue-100 text-blue-700 rounded hover:bg-blue-200 transition-colors"
                >
                  Today
                </a>
              </div>
            </div>

            {calendarError ? (
              <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded mb-6">
                <h3 class="font-bold">Calendar Integration Notice:</h3>
                <p class="mb-2">{calendarError}</p>
                <p class="text-sm">
                  {calendarError.includes('calendar access') || calendarError.includes('INSUFFICIENT_SCOPE') ? (
                    <>
                      <strong>Solution:</strong> You need to sign out and sign in with Google again to grant calendar permissions.
                      <br />
                      <a href="/logout" class="underline">Sign out</a> and then <a href="/login" class="underline">sign in with Google</a> again.
                    </>
                  ) : (
                    'Make sure you\'re signed in with Google and have granted calendar access permissions.'
                  )}
                </p>
              </div>
            ) : (
              <div class="space-y-6">
                <!-- Availability Summary -->
                <div class="bg-gray-50 rounded-lg p-4">
                  <h3 class="text-lg font-medium text-gray-900 mb-3">Availability Summary</h3>
                  <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <div class="text-center">
                      <div class="text-2xl font-bold text-green-600">
                        {availabilityTimeSlots.filter(slot => slot.type === 'available').length}
                      </div>
                      <div class="text-sm text-gray-600">Available Slots</div>
                    </div>
                    <div class="text-center">
                      <div class="text-2xl font-bold text-red-600">
                        {availabilityTimeSlots.filter(slot => slot.type === 'busy').length}
                      </div>
                      <div class="text-sm text-gray-600">Busy Slots</div>
                    </div>
                    <div class="text-center">
                      <div class="text-2xl font-bold text-blue-600">
                        {availabilityTimeSlots.filter(slot => slot.type === 'schedule-block').length}
                      </div>
                      <div class="text-sm text-gray-600">Schedule Blocks</div>
                    </div>
                    <div class="text-center">
                      <div class="text-2xl font-bold text-purple-600">
                        {googleCalendarEvents.length}
                      </div>
                      <div class="text-sm text-gray-600">Calendar Events</div>
                    </div>
                  </div>
                </div>

                <!-- Time Slots -->
                {availabilityTimeSlots.length > 0 ? (
                  <div>
                    <h3 class="text-lg font-medium text-gray-900 mb-3">Time Slots</h3>
                    <div class="space-y-2">
                      {availabilityTimeSlots.map((slot) => (
                        <div
                          class={`p-3 rounded-lg border ${
                            slot.type === 'available' 
                              ? 'bg-green-50 border-green-200' 
                              : slot.type === 'busy'
                              ? 'bg-red-50 border-red-200'
                              : 'bg-blue-50 border-blue-200'
                          }`}
                        >
                          <div class="flex justify-between items-center">
                            <div class="flex items-center space-x-3">
                              <div class={`w-3 h-3 rounded-full ${
                                slot.type === 'available' 
                                  ? 'bg-green-500' 
                                  : slot.type === 'busy'
                                  ? 'bg-red-500'
                                  : 'bg-blue-500'
                              }`}></div>
                              <div>
                                <div class="font-medium text-gray-900">
                                  {slot.title || (slot.type === 'available' ? 'Available' : slot.type === 'busy' ? 'Busy' : 'Schedule Block')}
                                </div>
                                <div class="text-sm text-gray-600">
                                  {format(new Date(slot.start), 'h:mm a')} - {format(new Date(slot.end), 'h:mm a')}
                                </div>
                              </div>
                            </div>
                            <div class="text-sm text-gray-500">
                              {slot.priority && (
                                <span class={`px-2 py-1 text-xs rounded-full ${
                                  slot.priority === 'high' ? 'bg-red-100 text-red-800' :
                                  slot.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                                  'bg-green-100 text-green-800'
                                }`}>
                                  {slot.priority}
                                </span>
                              )}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                ) : (
                  <div class="text-center py-12">
                    <div class="text-gray-400 text-6xl mb-4">📅</div>
                    <h3 class="text-lg font-medium text-gray-900 mb-2">No availability data</h3>
                    <p class="text-gray-500 mb-4">
                      No schedule blocks or calendar events found for this day.
                    </p>
                    <a
                      href="/schedule/maintainer"
                      class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors"
                    >
                      Create Schedule Block
                    </a>
                  </div>
                )}
              </div>
            )}
          </div>
        )}

        <!-- Quick Stats -->
        <div class="mt-8 bg-gray-50 rounded-lg p-6">
          <h3 class="text-lg font-medium text-gray-900 mb-4">Quick Stats</h3>
          <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div class="text-center">
              <div class="text-2xl font-bold text-blue-600">{scheduleBlocks.length}</div>
              <div class="text-sm text-gray-600">Total Blocks</div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-bold text-green-600">
                {scheduleBlocks.filter(b => b.isActive).length}
              </div>
              <div class="text-sm text-gray-600">Active Blocks</div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-bold text-purple-600">
                {scheduleBlocks.filter(b => b.isRecurring).length}
              </div>
              <div class="text-sm text-gray-600">Recurring</div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-bold text-orange-600">
                {scheduleBlocks.filter(b => b.priority === 'high').length}
              </div>
              <div class="text-sm text-gray-600">High Priority</div>
            </div>
          </div>
        </div>
        
        <!-- Navigation -->
        <div class="mt-6">
          <a 
            href="/calendar" 
            class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded mr-4"
          >
            View Calendar
          </a>
          <a 
            href="/" 
            class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded mr-4"
          >
            Back to Home
          </a>
          <form method="POST" action={actions.logout} class="inline">
            <button 
              type="submit" 
              class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"
            >
              Logout
            </button>
          </form>
        </div>
      </div>
    ) : (
      <div class="max-w-2xl mx-auto">
        <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded mb-6">
          <h2 class="text-xl font-bold">Access Denied</h2>
          <p>You must be logged in to manage your schedule settings.</p>
        </div>
        
        <div class="bg-white rounded-lg shadow-md p-6">
          <div class="text-center space-y-4">
            <p class="text-gray-600">Please log in to access your schedule settings.</p>
            
            <div class="flex space-x-4 justify-center">
              <a 
                href="/login" 
                class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded"
              >
                Login
              </a>
              <a 
                href="/register" 
                class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"
              >
                Register
              </a>
            </div>
          </div>
        </div>
      </div>
    )}
  </div>
</Layout>

<script>
  import { actions } from 'astro:actions';
  import { navigate } from 'astro:transitions/client';
  import { startOfDay, endOfDay } from 'date-fns';
  import { createFetchCalendarFormData } from '../../lib/types';
  
  // Handle calendar refresh
  const refreshBtn = document.getElementById('refreshCalendarBtn') as HTMLButtonElement | null;
  
  refreshBtn?.addEventListener('click', async () => {
    if (!refreshBtn) return;
    
    refreshBtn.textContent = 'Refreshing...';
    refreshBtn.disabled = true;
    
    try {
      // Create proper date range for refresh
      const today = new Date();
      const startOfCurrentMonth = startOfDay(today);
      const endOfCurrentMonth = endOfDay(today);
      
      // Create typesafe FormData
      const formData = createFetchCalendarFormData(startOfCurrentMonth, endOfCurrentMonth);
      
      // Fetch fresh calendar data
      const result = await actions.fetchCalendar(formData);
      
      if (result.data?.success) {
        // Reload the page to update with fresh data
        window.location.reload();
      } else {
        console.error('Error refreshing calendar:', result.error?.message);
        refreshBtn.textContent = 'Refresh Calendar';
        refreshBtn.disabled = false;
      }
    } catch (error) {
      console.error('Error refreshing calendar:', error);
      refreshBtn.textContent = 'Refresh Calendar';
      refreshBtn.disabled = false;
    }
  });
  
  // Handle logout form
  const logoutForm = document.querySelector('form[action*="logout"]');
  
  logoutForm?.addEventListener('submit', async (event) => {
    event.preventDefault();
    
    const { error } = await actions.logout(new FormData());
    
    if (!error) {
      navigate('/');
    }
  });
</script>